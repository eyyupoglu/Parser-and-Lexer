{
module lexer
open Microsoft.FSharp.Text.Lexing
open parser
open System.Text

}

let char        = ['a'-'z' 'A'-'Z']
let digit = ['0'-'9']
let num = digit+
let whitespace = [' ' '\t' ]
let newline     = "\n\r" | '\n' | '\r'
let name        = char(char|digit)*


rule tokenize = parse
| whitespace     { tokenize lexbuf }
| newline        { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
| "do "          { DO }
| " od"           { OD }
| "if "          { IF }
| " fi"          { FI }
| "("            { LPAR }
| ")"            { RPAR }
| ";"            { SEMI }
| ":="           { ASSIGN }
| '*'           { TIMES }
| '/'           { DIV }
| '+'           { PLUS }
| '-'           { MINUS }
| '^'           { POW }
| ">"			{ GREATER }
| "<"			{ SMALLER }
| "->"			{ARROW}
| "[]"			{ BOX }
| num           { NUM(Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| eof            { EOF }
| name              { let str = LexBuffer<_>.LexemeString lexbuf in NAME(str) }
| "skip"		 {SKIP}
| "true"		 {TRUE}
| "false"		 {FALSE}
| "&"			 {AND}
| "|"			 {OR}
| "&&"			 {CAND}
| "||"			 {COR}
| "!"            {NOT}
| "="			 {EQUALS}
| "!="			 {UNEQUAL}
| ">="			 {GREATEROREQUAL}
| "<="			 {SMALLEROREQUAL}
