// Signature file for parser generated by fsyacc
module parser
type token = 
  | SMALLEROREQUAL
  | ARROW
  | BOX
  | SKIP
  | SEMI
  | IF
  | FI
  | DO
  | OD
  | TRUE
  | FALSE
  | AND
  | OR
  | CAND
  | COR
  | NOT
  | EQUALS
  | UNEQUAL
  | GREATER
  | GREATEROREQUAL
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | EOF
  | ASSIGN
  | SMALLER
  | NUM of (int)
  | NAME of (string)
type tokenId = 
    | TOKEN_SMALLEROREQUAL
    | TOKEN_ARROW
    | TOKEN_BOX
    | TOKEN_SKIP
    | TOKEN_SEMI
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_CAND
    | TOKEN_COR
    | TOKEN_NOT
    | TOKEN_EQUALS
    | TOKEN_UNEQUAL
    | TOKEN_GREATER
    | TOKEN_GREATEROREQUAL
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EOF
    | TOKEN_ASSIGN
    | TOKEN_SMALLER
    | TOKEN_NUM
    | TOKEN_NAME
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_b
    | NONTERM_a
    | NONTERM_gc
    | NONTERM_c
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (C) 
